import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class StudentManagementSystem {

    public static void main(String[] args) {
        StudentManager manager = new StudentManager();
        Scanner scanner = new Scanner(System.in);
        boolean exit = false;

        while (!exit) {
            displayMenu();
            String choice = scanner.nextLine();

            switch (choice) {
                case "1":
                    manager.addStudent(scanner);
                    break;
                case "2":
                    manager.editStudent(scanner);
                    break;
                case "3":
                    manager.removeStudent(scanner);
                    break;
                case "4":
                    manager.searchStudent(scanner);
                    break;
                case "5":
                    manager.displayAllStudents();
                    break;
                case "6":
                    manager.saveStudentsToFile();
                    break;
                case "7":
                    exit = true;
                    System.out.println("Goodbye! üëã");
                    break;
                default:
                    System.out.println("‚ùå Invalid option. Please try again.");
            }
        }
        scanner.close();
    }

    private static void displayMenu() {
        System.out.println("\n--- Student Management System ---");
        System.out.println("1. Add a new student");
        System.out.println("2. Edit an existing student");
        System.out.println("3. Remove a student");
        System.out.println("4. Search for a student");
        System.out.println("5. Display all students");
        System.out.println("6. Save data to file");
        System.out.println("7. Exit");
        System.out.print("Enter your choice: ");
    }
}

class StudentManager {
    private List<Student> students;
    private static final String FILE_NAME = "students.dat";

    public StudentManager() {
        this.students = new ArrayList<>();
        loadStudentsFromFile();
    }

    public void addStudent(Scanner scanner) {
        System.out.print("Enter student name: ");
        String name = scanner.nextLine();
        System.out.print("Enter roll number: ");
        String rollNumberStr = scanner.nextLine();
        System.out.print("Enter grade: ");
        String grade = scanner.nextLine();

        if (name.isEmpty() || rollNumberStr.isEmpty() || grade.isEmpty()) {
            System.out.println("‚ùå All fields are required. Please try again.");
            return;
        }

        try {
            int rollNumber = Integer.parseInt(rollNumberStr);
            if (findStudentByRollNumber(rollNumber) == null) {
                students.add(new Student(name, rollNumber, grade));
                System.out.println("‚úÖ Student added successfully.");
            } else {
                System.out.println("‚ùå Student with this roll number already exists.");
            }
        } catch (NumberFormatException e) {
            System.out.println("‚ùå Invalid roll number. Please enter a number.");
        }
    }

    public void editStudent(Scanner scanner) {
        System.out.print("Enter roll number of student to edit: ");
        String rollNumberStr = scanner.nextLine();

        try {
            int rollNumber = Integer.parseInt(rollNumberStr);
            Student student = findStudentByRollNumber(rollNumber);
            if (student != null) {
                System.out.println("Editing student: " + student);
                System.out.print("Enter new name (or press Enter to keep current): ");
                String newName = scanner.nextLine();
                if (!newName.isEmpty()) {
                    student.setName(newName);
                }

                System.out.print("Enter new grade (or press Enter to keep current): ");
                String newGrade = scanner.nextLine();
                if (!newGrade.isEmpty()) {
                    student.setGrade(newGrade);
                }
                System.out.println("‚úÖ Student information updated successfully.");
            } else {
                System.out.println("‚ùå Student not found.");
            }
        } catch (NumberFormatException e) {
            System.out.println("‚ùå Invalid roll number. Please enter a number.");
        }
    }

    public void removeStudent(Scanner scanner) {
        System.out.print("Enter roll number of student to remove: ");
        String rollNumberStr = scanner.nextLine();

        try {
            int rollNumber = Integer.parseInt(rollNumberStr);
            Student studentToRemove = findStudentByRollNumber(rollNumber);
            if (studentToRemove != null) {
                students.remove(studentToRemove);
                System.out.println("‚úÖ Student removed successfully.");
            } else {
                System.out.println("‚ùå Student not found.");
            }
        } catch (NumberFormatException e) {
            System.out.println("‚ùå Invalid roll number. Please enter a number.");
        }
    }

    public void searchStudent(Scanner scanner) {
        System.out.print("Enter roll number to search: ");
        String rollNumberStr = scanner.nextLine();

        try {
            int rollNumber = Integer.parseInt(rollNumberStr);
            Student student = findStudentByRollNumber(rollNumber);
            if (student != null) {
                System.out.println("‚úÖ Student Found: " + student);
            } else {
                System.out.println("‚ùå Student not found.");
            }
        } catch (NumberFormatException e) {
            System.out.println("‚ùå Invalid roll number. Please enter a number.");
        }
    }

    public void displayAllStudents() {
        if (students.isEmpty()) {
            System.out.println("üìù No students in the system.");
        } else {
            System.out.println("\n--- All Students ---");
            for (Student s : students) {
                System.out.println(s);
            }
            System.out.println("--------------------");
        }
    }

    public void saveStudentsToFile() {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(FILE_NAME))) {
            oos.writeObject(students);
            System.out.println("üíæ Student data saved to file.");
        } catch (IOException e) {
            System.out.println("Error saving student data: " + e.getMessage());
        }
    }

    @SuppressWarnings("unchecked")
    private void loadStudentsFromFile() {
        File file = new File(FILE_NAME);
        if (file.exists()) {
            try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(FILE_NAME))) {
                students = (List<Student>) ois.readObject();
                System.out.println("üìÇ Student data loaded from file.");
            } catch (IOException | ClassNotFoundException e) {
                System.out.println("Error loading student data: " + e.getMessage());
            }
        }
    }

    private Student findStudentByRollNumber(int rollNumber) {
        for (Student s : students) {
            if (s.getRollNumber() == rollNumber) {
                return s;
            }
        }
        return null;
    }
}

class Student implements Serializable {
    private String name;
    private int rollNumber;
    private String grade;

    public Student(String name, int rollNumber, String grade) {
        this.name = name;
        this.rollNumber = rollNumber;
        this.grade = grade;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getRollNumber() {
        return rollNumber;
    }

    public void setRollNumber(int rollNumber) {
        this.rollNumber = rollNumber;
    }

    public String getGrade() {
        return grade;
    }

    public void setGrade(String grade) {
        this.grade = grade;
    }

    @Override
    public String toString() {
        return "Roll Number: " + rollNumber + ", Name: " + name + ", Grade: " + grade;
    }
}
